name: 'Publish Lambda Docker Imange'

on: 
  push: 
    branches:
      - rework
  pull_request:
  workflow_dispatch:
jobs:
  Cloudformation-checker:
    name: Check linting and security concerns
    runs-on: ubuntu-latest
    env:
      ACTIONS_RUNNER_DEBUG: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Load constats from constants.json
        id: get-constants
        run: |
          # Read the constants.json file and extract the value of 'REGION'
          aws_region=$(jq -r '.REGION' constants.json)
          erc_repo_name=$(jq -r '.ERC_REPO_NAME' constants.json)
          docker_container_name=$(jq -r '.DOCKER_CONTAINER_NAME' constants.json)
          serv_user=$(jq -r '.AWS_SERVICE_USER' constants.json)
          aws_account_id=$(aws sts get-caller-identity --query 'Account' --output text)
          # Set the 'aws-region' variable for subsequent steps
          echo "aws-region=$aws_region" >> "$GITHUB_OUTPUT"
          echo "erc-repo-name=$erc_repo_name" >> "$GITHUB_OUTPUT"
          echo "docker-container-name=$docker_container_name" >> "$GITHUB_OUTPUT"
          echo "aws-servusr-name=$serv_user" >> "$GITHUB_OUTPUT"
          echo "aws-account-id=$aws_account_id" >> "$GITHUB_OUTPUT"


      - name: Configure AWS Credentials
        id: aws-deploy-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ACCESS_KEY_SECRET }}
          aws-region: ${{ steps.get-constants.outputs.aws-region }}

     # Deploy to AWS CloudFormation ECR Stack 
      - name: Create ECR Entity
        id: create-ecr-stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: lambda-deployment-stack
          template: cloudformation/ecr-repo-deploy-stack.yaml
          parameter-overrides: >-
            AWSAccountId=${{ steps.get-constants.outputs.aws-account-id }}
            AWSUserName=${{ steps.get-constants.outputs.aws-servusr-name }}
            ECRRepositoryName=${{ steps.get-constants.outputs.erc-repo-name }}
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_NAMED_IAM

    # Build Docker imange and publish to ECR 
      - name: Publish Lambda Docker Image
        if: success()
        run: |
            echo Building the Docker image...
            docker build -t ${{ steps.get-constants.outputs.docker-container-name }}:latest -f Dockerfile .
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
            docker tag ${{ steps.get-constants.outputs.docker-container-name }}:latest  $AWS_ACCOUNT_ID.dkr.ecr.${{ steps.get-constants.outputs.aws-region }}.amazonaws.com/${{ steps.get-constants.outputs.erc-repo-name }}:latest
            echo Build Tagged.....
            aws ecr get-login-password --region ${{ steps.get-constants.outputs.aws-region }} | docker login --username AWS --password-stdin  $AWS_ACCOUNT_ID.dkr.ecr.${{ steps.get-constants.outputs.aws-region }}.amazonaws.com
            docker push  $AWS_ACCOUNT_ID.dkr.ecr.${{ steps.get-constants.outputs.aws-region }}.amazonaws.com/${{ steps.get-constants.outputs.erc-repo-name }}
      
    # Deploy to AWS CloudFormation Stack that allocates resources 
      - name: Allocate AWS Resources
        id: create-resources-stack
        if: success()
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: resourcese-allocation-stack
          template: cloudformation/resource-management-stack.yaml
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_NAMED_IAM