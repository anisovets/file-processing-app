name: 'Publish Lambda Docker Imange'

on: 
  push: 
    branches:
      - rework
  #pull_request:
  workflow_dispatch:
jobs:
  Cloudformation-checker:
    name: Check linting and security concerns
    runs-on: ubuntu-latest
    env:
      ACTIONS_RUNNER_DEBUG: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ACCESS_KEY_SECRET }}
          aws-region: us-east-1
    # Get AWS Account ID 
      - name: Get AWS Account ID
        id: get-account-id
        run: |
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
            echo "AWS Account ID: $AWS_ACCOUNT_ID"
            echo "::set-output name=account_id::$AWS_ACCOUNT_ID
        
     # Deploy to AWS CloudFormation ECR Stack 
      - name: Create ECR Entity
        id: create-ecr-stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: lambda-deployment-stack
          template: cloudformation/lambda-deploy-stack.yaml
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_NAMED_IAM

    # Build Docker imange and publish to ECR 
      - name: Publish Lambda Decker Image
        if: success()
        run: |
            echo Building the Docker image...
            docker build -t processing-lambda:latest -f Dockerfile .
            docker tag processing-lambda:latest ${{ needs.get-account-id.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com/processing-erc-repo:latest
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ needs.get-account-id.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com
            docker push ${{ needs.get-account-id.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com/processing-erc-repo